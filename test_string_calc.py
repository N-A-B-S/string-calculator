import pytest
from string_calculator import infix_to_rpn, evaluate_rpn, evaluate_expression

@pytest.mark.parametrize("expression,expected_rpn", [
    (["2 + 5", ["2", "5", "+"]]),
    (["8 - 3", ["8", "3", "-"]]),
    (["5 * 4", ["5", "4", "*"]]),
    (["8 / 2", ["8", "2", "/"]]),
    (["4 ^ 2", ["4", "2", "^"]]),
    (["1 + 2 * 3", ["1", "2", "3", "*", "+"]]),
    (["(1 + 2) * 3", ["1", "2", "+", "3", "*"]]),
    (["6 + 3 - 2 + 12", ["6", "3", "+", "2", "-", "12", "+"]]),
    (["2 * 15 + 23", ["2", "15", "*", "23", "+"]]),
    (["10 - 3 ^ 2", ["10", "3", "2", "^", "-"]]),
    (["3.5 * 3", ["3.5", "3", "*"]]),
    (["-53 + -24", ["-53", "-24", "+"]]),
    (["10 / 3", ["10", "3", "/"]]),
    (["(-20 * 1.8) / 2", ["-20", "1.8", "*", "2", "/"]]),
    (["-12.315 - 42", ["-12.315", "42", "-"]])
])
def test_infix_to_rpn(expression, expected_rpn):
    assert infix_to_rpn(expression) == expected_rpn

@pytest.mark.parametrize("rpn_expression,expected_result", [
    ([["2", "5", "+"], 7.0]),
    ([["8", "3", "-"], 5.0]),
    ([["5", "4", "*"], 20.0]),
    ([["8", "2", "/"], 4.0]),
    ([["4", "2", "^"], 16]),
    ([["1", "2", "3", "*", "+"], 7.0]),
    ([["1", "2", "+", "3", "*"], 9.0]),
    ([["6", "3", "+", "2", "-", "12", "+"], 19.0]),
    ([["2", "15", "*", "23", "+"], 53.0]),
    ([["10", "3", "2", "^", "-"], 1.0]),
    ([["3.5", "3", "*"], 10.5]),
    ([["-53", "-24", "+"], -77.0]),
    ([["10", "3", "/", ], 3.333]),
    ([["-20", "1.8", "*", "2", "/"], -18.0]),
    ([["-12.315", "42", "-"], -54.315])
])
def test_evaluate_rpn(rpn_expression, expected_result):
    assert evaluate_rpn(rpn_expression) == pytest.approx(expected_result, rel=1e-3)

